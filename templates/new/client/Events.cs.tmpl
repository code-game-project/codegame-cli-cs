/*
This code was generated by codegame-cli-cs.

CHANGES TO THIS FILE MAY CAUSE INCORRECT BEHAVIOR AND WILL BE LOST IF
THE CODE IS REGENERATED.
*/
namespace {{.GameNamePascal}};

public partial class Game : IDisposable
{
{{ range .Commands }}
    /// <summary>
    /// Sends a `{{.Name}}` command.
    /// </summary>
    /// <param name="data">The command data.</param>
    /// <exception cref="System.Text.Json.JsonException">Thrown when the command could not be serialized.</exception>
    public void Send{{.PascalName}}({{.PascalName}}Cmd data)
    {
        socket.Send("{{.Name}}", data);
    }
{{ end }}
{{ range .Events }}
    /// <summary>
    /// Triggers the callback every time the `{{.Name}}` event is received.
    /// </summary>
    /// <param name="callback">The callback to call.</param>
    /// <param name="once">Only trigger the callback the first time the event is received.</param>
    /// <returns>The ID of the callback that can be used to remove it again.</returns>
    public Guid On{{.PascalName}}(Action<{{.PascalName}}Event> callback, bool once = false)
    {
        return socket.On("{{.Name}}", callback, once);
    }

    /// <summary>
    /// Triggers the callback every time the `{{.Name}}` event is received.
    /// </summary>
    /// <param name="callback">The callback to call.</param>
    /// <param name="once">Only trigger the callback the first time the event is received.</param>
    /// <returns>The ID of the callback that can be used to remove it again.</returns>
    public Guid On{{.PascalName}}(Func<{{.PascalName}}Event, Task> callback, bool once = false)
    {
        return socket.On("{{.Name}}", callback, once);
    }
{{ end }}

    /// <summary>
    /// Removes an event callback.
    /// </summary>
    /// <param name="eventName">The name of the event.</param>
    /// <param name="id">The ID of the callback.</param>
    public void RemoveCallback(string eventName, Guid id)
    {
        socket.RemoveCallback(eventName, id);
    }
}
