/*
This code was generated by codegame-cli-cs.

CHANGES TO THIS FILE MAY CAUSE INCORRECT BEHAVIOR AND WILL BE LOST IF
THE CODE IS REGENERATED.
*/
namespace {{.GameNamePascal}};

using System.CommandLine;
using CodeGame.Client;

/// <summary>
/// Game represents a {{.DisplayName}} game.
/// </summary>
public partial class Game : IDisposable
{
    /// <summary>
    /// The URL of the game server without any protocol or trailing slash.
    /// </summary>
    public static string URL
    {
        get
        {
            var url = Environment.GetEnvironmentVariable("CG_GAME_URL");
            if (url == null || url == "") throw new InvalidOperationException("The CG_GAME_URL environment variable must be set.");
            return url;
        }
    }

    /// <summary>
    /// The ID of the game.
    /// </summary>
    public string Id { get; private set; }
    /// <summary>
    /// The config of the game.
    /// </summary>
    public GameConfig Config { get; private set; }
    /// <summary>
    /// Whether the socket is connected in spectate mode.
    /// </summary>
    public bool Spectating { get; private set; }
    /// <summary>
    /// The current session.
    /// </summary>
    public Session Session { get => socket.Session; }

    private GameSocket socket;

    /// <summary>
    /// Parses the command line arguments and creates a new game depending on which flags and commands were used.
    /// <para>
    /// Commands:
    /// <list type="bullet">
    /// <item>create      (Creates a new game and joins it.)</item>
    /// <item>join        (Joins an existing game.)</item>
    /// <item>reconnect   (Reconnects to an existing session.)</item>
    /// </list>
    /// </para>
    /// <para>
    /// Flags:
    /// <list type="bullet">
    /// <item>--public (Makes the created game public)</item>
    /// <item>--protected (Makes the created game protected.</item>
    /// <item>--spectate (Spectates the game instead of joining it. (the username is not necessary if this flag is set)</item>
    /// </list>
    /// </para>
    /// </summary>
    /// <param name="args">The command line arguments.</param>
    /// <param name="config">The config to use when a new game is created.</param>
    /// <returns>A new Game instance.</returns>
    /// <exception cref="CodeGameException">Thrown when the server refuses to create a new game/player.</exception>
    /// <exception cref="HttpRequestException">Thrown when an http request fails.</exception>
    /// <exception cref="System.Text.Json.JsonException">Thrown when the server response is invalid or when the session file is corrupted.</exception>
    /// <exception cref="System.Net.WebSockets.WebSocketException">Thrown when the websocket connection could not be established.</exception>
    /// <exception cref="IOException">Thrown when trying to load a session file that does not exist.</exception>
    public static async Task<Game> FromArgs(string[] args, GameConfig? config = null)
    {
        if (config == null) config = new GameConfig();

        var publicFlag = new Option<bool>("--public", "Make the created game public.");
        var protectedFlag = new Option<bool>("--protected", "Make the created game protected.");
        var spectateFlag = new Option<bool>("--spectate", "Spectate the created/joined game. The username is not necessary if this flag is set.");

        var gameIdArg = new Argument<string>("game_id", "The ID of the game.");
        var usernameArg = new Argument<string>("username", () => "", "The username of the player.");
        var joinSecretArg = new Argument<string>("join_secret", () => "", "The join secret.");

        var rootCommand = new RootCommand("{{.Description}}");

        Game? game = null;

        var createCmd = new Command("create", "Create a new game.");
        createCmd.AddArgument(usernameArg);
        createCmd.AddOption(publicFlag);
        createCmd.AddOption(protectedFlag);
        createCmd.AddOption(spectateFlag);
        createCmd.SetHandler(async (username, makePublic, protect, spectate) =>
        {
            if (!spectate && username == "")
            {
                Console.WriteLine("'username' is required.");
                Environment.Exit(1);
            }
            var joinSecret = "";
            if (protect)
                (game, joinSecret) = spectate ? await CreateAndSpectateProtectedGame(makePublic, config) : await CreateAndJoinProtectedGame(username, makePublic, config);
            else
                game = spectate ? await CreateAndSpectateGame(makePublic, config) : await CreateAndJoinGame(username, makePublic, config);
            Console.WriteLine($"Game ID: {game.Id}");
            if (protect) Console.WriteLine($"Join secret: {joinSecret}");
        }, usernameArg, publicFlag, protectedFlag, spectateFlag);
        rootCommand.Add(createCmd);

        var joinCmd = new Command("join", "Join an existing game.");
        joinCmd.AddArgument(gameIdArg);
        joinCmd.AddArgument(usernameArg);
        joinCmd.AddArgument(joinSecretArg);
        joinCmd.AddOption(spectateFlag);
        joinCmd.SetHandler(async (gameId, username, joinSecret, spectate) =>
        {
            if (!spectate && username == "")
            {
                Console.WriteLine("'username' is required.");
                Environment.Exit(1);
            }
            if (spectate)
                game = await SpectateGame(gameId);
            else
                game = await JoinGame(gameId, username, joinSecret);
        }, gameIdArg, usernameArg, joinSecretArg, spectateFlag);
        rootCommand.Add(joinCmd);

        var reconnectCmd = new Command("reconnect", "Reconnect with an existing session.");
        reconnectCmd.AddArgument(usernameArg);
        reconnectCmd.SetHandler(async (username) =>
        {
            if (username == "")
            {
                Console.WriteLine("'username' is required.");
                Environment.Exit(1);
            }
            try
            {
                game = await ReconnectGame(username);
            }
            catch (IOException)
            {
                Console.WriteLine($"There is no session with the name '{username}'.");
                Environment.Exit(0);
            }
        }, usernameArg);
        rootCommand.Add(reconnectCmd);

        var exitCode = await rootCommand.InvokeAsync(args);
        if (exitCode != 0 || game == null) Environment.Exit(exitCode);
        return game;
    }

    /// <summary>
    /// Creates a new game and joins it.
    /// </summary>
    /// <param name="username">The desired username.</param>
    /// <param name="makePublic">Make the created game public.</param>
    /// <param name="config">The game config.</param>
    /// <returns>A new Game instance.</returns>
    /// <exception cref="CodeGameException">Thrown when the server refuses to create a new game.</exception>
    /// <exception cref="HttpRequestException">Thrown when the http request fails.</exception>
    /// <exception cref="System.Text.Json.JsonException">Thrown when the server response is invalid.</exception>
    /// <exception cref="System.Net.WebSockets.WebSocketException">Thrown when the websocket connection could not be established.</exception>
    public static async Task<Game> CreateAndJoinGame(string username, bool makePublic, GameConfig? config = null)
    {
        var socket = await GameSocket.Create(URL);
        var gameId = await socket.CreateGame(makePublic, config);
        return await JoinGame(gameId, username);
    }

    /// <summary>
    /// Creates a new protected game and joins it.
    /// </summary>
    /// <param name="username">The desired username.</param>
    /// <param name="makePublic">Make the created game public.</param>
    /// <param name="config">The game config.</param>
    /// <returns>A new Game instance.</returns>
    /// <exception cref="CodeGameException">Thrown when the server refuses to create a new game.</exception>
    /// <exception cref="HttpRequestException">Thrown when the http request fails.</exception>
    /// <exception cref="System.Text.Json.JsonException">Thrown when the server response is invalid.</exception>
    /// <exception cref="System.Net.WebSockets.WebSocketException">Thrown when the websocket connection could not be established.</exception>
    public static async Task<(Game game, string joinSecret)> CreateAndJoinProtectedGame(string username, bool makePublic, GameConfig? config = null)
    {
        var socket = await GameSocket.Create(URL);
        var (gameId, joinSecret) = await socket.CreateProtectedGame(makePublic, config);
        return (await JoinGame(gameId, username, joinSecret), joinSecret);
    }

    /// <summary>
    /// Creates a new game and spectates it.
    /// </summary>
    /// <param name="makePublic">Make the created game public.</param>
    /// <param name="config">The game config.</param>
    /// <returns>A new Game instance.</returns>
    /// <exception cref="CodeGameException">Thrown when the server refuses to create a new game.</exception>
    /// <exception cref="HttpRequestException">Thrown when the http request fails.</exception>
    /// <exception cref="System.Text.Json.JsonException">Thrown when the server response is invalid.</exception>
    /// <exception cref="System.Net.WebSockets.WebSocketException">Thrown when the websocket connection could not be established.</exception>
    public static async Task<Game> CreateAndSpectateGame(bool makePublic, GameConfig? config = null)
    {
        var socket = await GameSocket.Create(URL);
        var gameId = await socket.CreateGame(makePublic, config);
        return await SpectateGame(socket, gameId);
    }

    /// <summary>
    /// Creates a new protected game and spectates it.
    /// </summary>
    /// <param name="makePublic">Make the created game public.</param>
    /// <param name="config">The game config.</param>
    /// <returns>A new Game instance.</returns>
    /// <exception cref="CodeGameException">Thrown when the server refuses to create a new game or player.</exception>
    /// <exception cref="HttpRequestException">Thrown when the http request fails.</exception>
    /// <exception cref="System.Text.Json.JsonException">Thrown when the server response is invalid.</exception>
    /// <exception cref="System.Net.WebSockets.WebSocketException">Thrown when the websocket connection could not be established.</exception>
    public static async Task<(Game game, string joinSecret)> CreateAndSpectateProtectedGame(bool makePublic, GameConfig? config = null)
    {
        var socket = await GameSocket.Create(URL);
        var (gameId, joinSecret) = await socket.CreateProtectedGame(makePublic, config);
        return (await SpectateGame(socket, gameId), joinSecret);
    }

    /// <summary>
    /// Joins an existing game.
    /// </summary>
    /// <param name="gameId">The ID of the game.</param>
    /// <param name="username">The desired username.</param>
    /// <param name="joinSecret">The join secret. (only needed for protected games)</param>
    /// <returns>A new Game instance.</returns>
    /// <exception cref="CodeGameException">Thrown when the server refuses to create a new player in the game.</exception>
    /// <exception cref="System.Net.WebSockets.WebSocketException">Thrown when the websocket connection could not be established.</exception>
    /// <exception cref="HttpRequestException">Thrown when the http request fails.</exception>
    /// <exception cref="System.Text.Json.JsonException">Thrown when the server response is invalid.</exception>
    public static async Task<Game> JoinGame(string gameId, string username, string joinSecret = "")
    {
        var socket = await GameSocket.Create(URL);
        return await JoinGame(socket, gameId, username, joinSecret);
    }

    private static async Task<Game> JoinGame(GameSocket socket, string gameId, string username, string joinSecret = "")
    {
        await socket.Join(gameId, username, joinSecret);
        var config = await socket.Api.FetchGameConfig<GameConfig>(gameId);
        return new Game(socket, gameId, config, false);
    }

    /// <summary>
    /// Spectates an existing game.
    /// </summary>
    /// <param name="gameId">The ID of the game.</param>
    /// <returns>A new Game instance.</returns>
    /// <exception cref="System.Net.WebSockets.WebSocketException">Thrown when the websocket connection could not be established.</exception>
    public static async Task<Game> SpectateGame(string gameId)
    {
        var socket = await GameSocket.Create(URL);
        return await SpectateGame(socket, gameId);
    }

    private static async Task<Game> SpectateGame(GameSocket socket, string gameId)
    {
        await socket.Spectate(gameId);
        var config = await socket.Api.FetchGameConfig<GameConfig>(gameId);
        return new Game(socket, gameId, config, true);
    }

    /// <summary>
    /// Reconnects to a previous session.
    /// </summary>
    /// <param name="username">The username of the player.</param>
    /// <returns>A new Game instance.</returns>
    /// <exception cref="System.Net.WebSockets.WebSocketException">Thrown when the websocket connection could not be established.</exception>
    /// <exception cref="IOException">Thrown when the session does not exist.</exception>
    /// <exception cref="System.Text.Json.JsonException">Thrown when the session file is corrupted.</exception>
    public static async Task<Game> ReconnectGame(string username)
    {
        var socket = await GameSocket.Create(URL);
        await socket.RestoreSession(username);
        var config = await socket.Api.FetchGameConfig<GameConfig>(socket.Session.GameId);
        return new Game(socket, socket.Session.GameId, config, false);
    }

    /// <summary>
    /// Retrieves the username of the player from the local player cache or fetches it from the server if it is not yet in the cache.
    /// </summary>
    /// <param name="playerId">The ID of the player.</param>
    /// <returns>The username of the player.</returns>
    /// <exception cref="CodeGameException">Thrown when the player does not exist in the game.</exception>
    /// <exception cref="HttpRequestException">Thrown when the http request fails.</exception>
    /// <exception cref="System.Text.Json.JsonException">Thrown when the server response could not be deserialized.</exception>
    public async Task<string> Username(string playerId)
    {
        return await socket.Username(playerId);
    }

    /// <summary>
    /// Blocks until the connection is closed.
    /// </summary>
    public void Wait()
    {
        socket.Wait();
    }

    /// <summary>
    /// Closes the underlying websocket connection.
    /// </summary>
    public void Dispose()
    {
        socket.Dispose();
    }

    private Game(GameSocket socket, string id, GameConfig config, bool spectating)
    {
        this.Id = id;
        this.Config = config;
        this.Spectating = spectating;

        this.socket = socket;
    }
}
